<div class="dropdown-component relative">
	<!-- Dropdown Button -->
	<button id="dropdownButton" type="button" class="inline-flex items-center justify-between w-full px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300 bg-white dark:bg-neutral-900 border border-neutral-300 dark:border-neutral-700 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-blue-500">
		<span id="dropdownSelectedText">Select option</span>
		<svg class="w-5 h-5 ml-2 -mr-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
		</svg>
	</button>

	<!-- Dropdown Menu -->
	<div id="dropdownMenu" class="hidden absolute z-10 w-full mt-2 bg-white dark:bg-neutral-900 rounded-lg shadow-lg ring-1 ring-black ring-opacity-5">
		<!-- Search Input (Optional) -->
		<div class="p-2" id="searchContainer">
			<input type="text" id="dropdownSearch" class="w-full px-3 py-2 text-sm bg-neutral-100 dark:bg-neutral-800 border border-transparent rounded-md text-neutral-700 dark:text-neutral-300 placeholder-neutral-500 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Search...">
		</div>

		<!-- Options List -->
		<ul id="dropdownOptions" class="max-h-60 overflow-auto py-2" role="listbox">
			<!-- Options will be dynamically inserted here -->
		</ul>

		<!-- Selected Items (for multi-select) -->
		<div id="selectedItems" class="hidden p-2 border-t dark:border-neutral-700">
			<div class="flex flex-wrap gap-2">
				<!-- Selected items will be dynamically inserted here -->
			</div>
		</div>
	</div>
</div>

<script>
	class Dropdown {
		constructor(options = {}) {
			this.options = {
				items: [],
				multiSelect: false,
				searchable: true,
				placeholder: 'Select option',
				onChange: null,
				...options
			};

			this.selectedItems = new Set();
			this.isOpen = false;
			
			this.init();
		}

		init() {
			this.button = document.getElementById('dropdownButton');
			this.menu = document.getElementById('dropdownMenu');
			this.searchContainer = document.getElementById('searchContainer');
			this.searchInput = document.getElementById('dropdownSearch');
			this.optionsList = document.getElementById('dropdownOptions');
			this.selectedItemsContainer = document.getElementById('selectedItems');

			// Toggle searchability
			this.searchContainer.style.display = this.options.searchable ? 'block' : 'none';

			// Setup event listeners
			this.button.addEventListener('click', () => this.toggleDropdown());
			this.searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));
			
			// Close dropdown when clicking outside
			document.addEventListener('click', (e) => {
				if (!this.button.contains(e.target) && !this.menu.contains(e.target)) {
					this.closeDropdown();
				}
			});

			// Initial render
			this.renderOptions();
			this.updateSelectedText();
		}

		toggleDropdown() {
			this.isOpen = !this.isOpen;
			this.menu.classList.toggle('hidden');
			this.button.querySelector('svg').style.transform = this.isOpen ? 'rotate(180deg)' : '';
			
			if (this.isOpen && this.options.searchable) {
				this.searchInput.focus();
			}
		}

		closeDropdown() {
			this.isOpen = false;
			this.menu.classList.add('hidden');
			this.button.querySelector('svg').style.transform = '';
		}

		handleSearch(query) {
			const filteredItems = this.options.items.filter(item =>
				item.label.toLowerCase().includes(query.toLowerCase())
			);
			this.renderOptions(filteredItems);
		}

		renderOptions(items = this.options.items) {
			this.optionsList.innerHTML = '';
			
			items.forEach(item => {
				const li = document.createElement('li');
				li.className = `px-4 py-2 text-sm cursor-pointer flex items-center justify-between ${
					this.selectedItems.has(item.value)
						? 'text-blue-600 dark:text-blue-500 bg-blue-50 dark:bg-blue-900/20'
						: 'text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800'
				}`;
				
				const content = document.createElement('div');
				content.className = 'flex items-center';
				
				if (this.options.multiSelect) {
					const checkbox = document.createElement('input');
					checkbox.type = 'checkbox';
					checkbox.className = 'mr-3 text-blue-600 rounded border-neutral-300 dark:border-neutral-700';
					checkbox.checked = this.selectedItems.has(item.value);
					content.appendChild(checkbox);
				}
				
				content.insertAdjacentText('beforeend', item.label);
				li.appendChild(content);
				
				if (this.selectedItems.has(item.value) && !this.options.multiSelect) {
					const checkIcon = document.createElement('svg');
					checkIcon.className = 'w-5 h-5';
					checkIcon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>';
					checkIcon.setAttribute('fill', 'none');
					checkIcon.setAttribute('stroke', 'currentColor');
					checkIcon.setAttribute('viewBox', '0 0 24 24');
					li.appendChild(checkIcon);
				}
				
				li.addEventListener('click', () => this.handleSelection(item));
				this.optionsList.appendChild(li);
			});
		}

		handleSelection(item) {
			if (this.options.multiSelect) {
				if (this.selectedItems.has(item.value)) {
					this.selectedItems.delete(item.value);
				} else {
					this.selectedItems.add(item.value);
				}
				this.renderOptions();
				this.renderSelectedItems();
			} else {
				this.selectedItems.clear();
				this.selectedItems.add(item.value);
				this.closeDropdown();
			}
			
			this.updateSelectedText();
			
			if (typeof this.options.onChange === 'function') {
				this.options.onChange(Array.from(this.selectedItems));
			}
		}

		updateSelectedText() {
			const selectedText = document.getElementById('dropdownSelectedText');
			
			if (this.selectedItems.size === 0) {
				selectedText.textContent = this.options.placeholder;
				return;
			}
			
			if (this.options.multiSelect) {
				selectedText.textContent = `${this.selectedItems.size} selected`;
			} else {
				const selectedItem = this.options.items.find(item => item.value === Array.from(this.selectedItems)[0]);
				selectedText.textContent = selectedItem ? selectedItem.label : this.options.placeholder;
			}
		}

		renderSelectedItems() {
			if (!this.options.multiSelect) return;
			
			this.selectedItemsContainer.classList.toggle('hidden', this.selectedItems.size === 0);
			const container = this.selectedItemsContainer.querySelector('div');
			container.innerHTML = '';
			
			this.selectedItems.forEach(value => {
				const item = this.options.items.find(i => i.value === value);
				if (!item) return;
				
				const chip = document.createElement('span');
				chip.className = 'inline-flex items-center px-2 py-1 rounded-md text-sm bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300';
				chip.innerHTML = `
					${item.label}
					<button class="ml-1 text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-200" onclick="event.stopPropagation()">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				`;
				
				chip.querySelector('button').addEventListener('click', () => {
					this.handleSelection(item);
				});
				
				container.appendChild(chip);
			});
		}
	}

	// Example usage:
	/*
	const dropdown = new Dropdown({
		items: [
			{ value: '1', label: 'Option 1' },
			{ value: '2', label: 'Option 2' },
			{ value: '3', label: 'Option 3' }
		],
		multiSelect: true,
		searchable: true,
		placeholder: 'Select options',
		onChange: (selectedValues) => {
			console.log('Selected:', selectedValues);
		}
	});
	*/
</script>